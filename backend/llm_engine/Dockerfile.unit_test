# llm_engine/Dockerfile.unit_test
# Base Image: Ubuntu 22.04 LTS
# 유닛 테스트 빌드 및 실행 환경

# ---- Builder Stage (Unit Testing Focus) ----
    FROM ubuntu:22.04 AS builder

    ARG TARGET_ARCH
    ENV TARGET_ARCH=${TARGET_ARCH}
    
    # Non-interactive apt-get
    ENV DEBIAN_FRONTEND=noninteractive
    
    # 빌드 및 테스트에 필요한 패키지 설치
    RUN apt-get update && \
        apt-get install -y --no-install-recommends \
        # C++ 컴파일러, CMake, PkgConfig, Git
        build-essential \
        cmake \
        pkg-config \
        git \
        # 파일 다운로드
        wget \
        # HTTPS 통신 및 인증서
        ca-certificates \
        # gRPC 빌드 의존성
        libprotobuf-dev \
        protobuf-compiler \
        libgrpc++-dev \
        protobuf-compiler-grpc \
        # cpr/curl 의존성
        libssl-dev \
        libcurl4-openssl-dev \
        zlib1g-dev \
        # Google Test 개발 라이브러리
        libgtest-dev \
        # 유닛 테스트 실행에 필요한 런타임 라이브러리도 여기서 설치
        libcurl4 \
        zlib1g \
        # 패키지 정리
        && update-ca-certificates \
        && apt-get clean \
        && rm -rf /var/lib/apt/lists/*
    
    # Google Test 라이브러리 컴파일 및 설치
    RUN cd /usr/src/googletest && \
        cmake CMakeLists.txt && \
        make && \
        find . -name '*.a' -exec install -o root -g root -m 644 {} /usr/lib \;
    
    # 소스 코드 복사
    WORKDIR /app
    COPY . .
    
    # 프로젝트 빌드 (테스트 포함) 및 유닛 테스트 실행
    RUN \
        # 빌드 디렉토리 생성 및 이동
        mkdir build && cd build && \
        echo "Running CMake with test configuration..." && \
        # CMake 실행 (유닛 테스트 타겟이 포함된 것으로 가정)
        # CMakeLists.txt에서 BUILD_TESTING=ON 등으로 테스트 빌드를 활성화할 수 있음
        cmake .. \
          -DCMAKE_BUILD_TYPE=Debug \
          -DTARGET_ARCH=${TARGET_ARCH} \
        && \
        echo "Running make..." && \
        # 모든 타겟 또는 특정 테스트 타겟 빌드
        make VERBOSE=1 -j$(nproc) \
        && \
        # 링커 캐시 업데이트 (필요시)
        echo "Running ldconfig..." && ldconfig \
        && \
        # 유닛 테스트 실행 (실행 파일 이름은 CMakeLists.txt에 정의된 대로)
        echo "Running Unit Tests..." && \
        ./unit_tests # CMake에서 정의한 테스트 실행 파일 이름 사용 (예: unit_tests)
    
    # 이 Dockerfile은 빌드 단계에서 테스트를 실행하고 결과를 출력합니다.
    # 최종 이미지는 테스트 결과 확인용이며, 실제 배포용은 아닙니다.
    # 테스트 성공 시 0, 실패 시 non-zero 반환하여 CI 등에서 활용 가능
    # CMD 또는 ENTRYPOINT를 명시적으로 설정하지 않아도 RUN에서 테스트 실행됨.
    # 필요시 ENTRYPOINT ["/app/build/unit_tests"] 추가 가능