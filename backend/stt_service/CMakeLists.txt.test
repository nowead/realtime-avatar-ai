# CMakeLists.txt.test - Unit test configuration for stt_service

cmake_minimum_required(VERSION 3.13)
project(stt_service_tests VERSION 1.0 LANGUAGES CXX) # 프로젝트 이름 변경 (선택 사항)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# ---=[ 의존성 찾기 (기존과 거의 동일 + GTest) ]=---
find_package(Protobuf REQUIRED)
message(STATUS "Protobuf Include Dirs: ${Protobuf_INCLUDE_DIRS}")
find_package(PkgConfig REQUIRED)
find_package(Threads REQUIRED)
pkg_check_modules(GRPC REQUIRED IMPORTED_TARGET grpc++)
if(NOT GRPC_FOUND)
    message(FATAL_ERROR "gRPC++ library not found...")
endif()
message(STATUS "Found gRPC++ using pkg-config for linking.")
find_program(Protobuf_PROTOC_EXECUTABLE protoc)
find_program(GRPC_CPP_PLUGIN grpc_cpp_plugin)
if(NOT Protobuf_PROTOC_EXECUTABLE OR NOT GRPC_CPP_PLUGIN)
    message(FATAL_ERROR "protoc or grpc_cpp_plugin not found.")
endif()
message(STATUS "Found protoc: ${Protobuf_PROTOC_EXECUTABLE}")
message(STATUS "Found gRPC C++ Plugin: ${GRPC_CPP_PLUGIN}")

# ---=[ 수정됨: Google Test 찾기 추가 ]=---
find_package(GTest REQUIRED)
message(STATUS "Found GTest: ${GTEST_LIBRARIES}") # GTest 1.11+ 에서는 GTEST_LIBRARIES 대신 GTest::gtest 사용 권장

# ---=[ 경로 설정 (기존과 동일) ]=---
set(SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})
set(PROTO_SOURCE_DIR "${SOURCE_DIR}/protos")
set(STT_PROTO_BASENAME "stt")
set(LLM_PROTO_BASENAME "llm")
set(STT_PROTO_FILE "${PROTO_SOURCE_DIR}/${STT_PROTO_BASENAME}.proto")
set(LLM_PROTO_FILE "${PROTO_SOURCE_DIR}/${LLM_PROTO_BASENAME}.proto")
set(GENERATED_DIR "${BINARY_DIR}/generated")
file(MAKE_DIRECTORY ${GENERATED_DIR})
# ... (ALL_GENERATED_SOURCES, ALL_GENERATED_HEADERS 설정 - 기존과 동일) ...
set(ALL_GENERATED_SOURCES
    ${GENERATED_DIR}/${STT_PROTO_BASENAME}.pb.cc ${GENERATED_DIR}/${STT_PROTO_BASENAME}.grpc.pb.cc
    ${GENERATED_DIR}/${LLM_PROTO_BASENAME}.pb.cc ${GENERATED_DIR}/${LLM_PROTO_BASENAME}.grpc.pb.cc
)
set(ALL_GENERATED_HEADERS
    ${GENERATED_DIR}/${STT_PROTO_BASENAME}.pb.h ${GENERATED_DIR}/${STT_PROTO_BASENAME}.grpc.pb.h
    ${GENERATED_DIR}/${LLM_PROTO_BASENAME}.pb.h ${GENERATED_DIR}/${LLM_PROTO_BASENAME}.grpc.pb.h
)


# Azure Speech SDK 경로 설정 (기존과 동일, arm64 경로 사용)
set(SPEECHSDK_ROOT "$ENV{SPEECHSDK_ROOT}" CACHE PATH "Root directory of the Azure Speech SDK")
if(NOT SPEECHSDK_ROOT OR NOT EXISTS "${SPEECHSDK_ROOT}/include/cxx_api/speechapi_cxx.h")
    message(FATAL_ERROR "Azure Speech SDK not found...")
endif()
message(STATUS "Using Azure Speech SDK from: ${SPEECHSDK_ROOT}")
set(SPEECHSDK_CXX_INCLUDE_DIR "${SPEECHSDK_ROOT}/include/cxx_api")
set(SPEECHSDK_C_INCLUDE_DIR "${SPEECHSDK_ROOT}/include/c_api")
# 아키텍처 확인 부분은 테스트 환경에서도 동일하게 필요할 수 있음
if(DEFINED ENV{TARGET_ARCH} AND ($ENV{TARGET_ARCH} STREQUAL "arm64")) # 환경 변수 사용 예시
    set(SPEECHSDK_LIBRARY_DIR "${SPEECHSDK_ROOT}/lib/arm64")
else() # 기본값 또는 x64
    set(SPEECHSDK_LIBRARY_DIR "${SPEECHSDK_ROOT}/lib/x64")
endif()
message(STATUS "Using Speech SDK Library Dir: ${SPEECHSDK_LIBRARY_DIR}")


# ---=[ Protobuf/gRPC 코드 생성 (기존과 동일) ]=---
add_custom_command(
    OUTPUT ${ALL_GENERATED_SOURCES} ${ALL_GENERATED_HEADERS}
    COMMAND ${Protobuf_PROTOC_EXECUTABLE}
            --proto_path=${PROTO_SOURCE_DIR} --cpp_out=${GENERATED_DIR} --grpc_out=${GENERATED_DIR}
            --plugin=protoc-gen-grpc=${GRPC_CPP_PLUGIN}
            ${STT_PROTO_FILE} ${LLM_PROTO_FILE}
    DEPENDS ${STT_PROTO_FILE} ${LLM_PROTO_FILE}
    COMMENT "Generating Protobuf and gRPC C++ sources from .proto files"
    VERBATIM
)
add_custom_target(generate_proto_sources ALL DEPENDS ${ALL_GENERATED_SOURCES} ${ALL_GENERATED_HEADERS})


# ---=[ 수정됨: 유닛 테스트 실행 파일 빌드 ]=---
enable_testing() # CTest 활성화 (선택 사항)

# 유닛 테스트 실행 파일 타겟 정의
# 주의: 테스트 대상 코드(.cpp)들을 여기에 다시 포함해야 함 (비효율적일 수 있음)
add_executable(unit_tests
    "${SOURCE_DIR}/tests/internal_unit_tests.cpp" # <-- 실제 테스트 파일 경로 확인!

    # 테스트 대상 소스 코드들 (라이브러리로 만들지 않았으므로 다시 포함)
    "${SOURCE_DIR}/src/stt_service.cpp"
    "${SOURCE_DIR}/src/azure_stt_client.cpp"
    "${SOURCE_DIR}/src/llm_engine_client.cpp"
    ${ALL_GENERATED_SOURCES} # 생성된 proto 소스 포함
)

# unit_tests 타겟이 코드 생성 타겟에 의존하도록 설정
add_dependencies(unit_tests generate_proto_sources)

# 유닛 테스트에 필요한 include 디렉토리 설정
target_include_directories(unit_tests PRIVATE
    "${SOURCE_DIR}/src"            # 소스 헤더 파일 경로
    "${GENERATED_DIR}"             # 생성된 proto 헤더 파일 경로
    ${SPEECHSDK_CXX_INCLUDE_DIR}
    ${SPEECHSDK_C_INCLUDE_DIR}
    ${Protobuf_INCLUDE_DIRS}
    ${GTEST_INCLUDE_DIRS}          # Google Test 헤더 경로 추가 (find_package가 설정)
    # gRPC include 는 PkgConfig::GRPC 가 자동으로 처리
)

# 유닛 테스트에 필요한 라이브러리 링크
target_link_libraries(unit_tests PRIVATE
    Threads::Threads
    PkgConfig::GRPC             # gRPC 라이브러리
    ${Protobuf_LIBRARIES}       # Protobuf 라이브러리
    "${SPEECHSDK_LIBRARY_DIR}/libMicrosoft.CognitiveServices.Speech.core.so" # Azure SDK 코어 라이브러리
    GTest::gtest                # Google Test 라이브러리
    GTest::gtest_main           # Google Test main 함수 포함 라이브러리
)

# CTest 와 Google Test 연동 (선택 사항)
include(GoogleTest)
gtest_discover_tests(unit_tests)

# ---=[ 완료 메시지 수정 ]=---
message(STATUS "CMake configuration complete for stt_service_tests.")