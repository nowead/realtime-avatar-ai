# Dockerfile.unit_test

# Base Image: Ubuntu 22.04 LTS

# ---- Builder Stage (Unit Testing Focus) ----
# 빌드 도구, SDK, 테스트 프레임워크 및 필수 라이브러리 설치 후 소스 코드 및 테스트 컴파일/실행
FROM ubuntu:22.04 AS builder

# Non-interactive apt-get
ENV DEBIAN_FRONTEND=noninteractive
# Speech SDK 설치 경로
ENV SPEECHSDK_ROOT=/opt/speechsdk

# 빌드 및 테스트에 필요한 패키지 설치
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    # C++ 컴파일러, CMake, PkgConfig
    build-essential \
    cmake \
    pkg-config \
    # 파일 다운로드 및 압축 해제
    wget \
    tar \
    # HTTPS 통신 및 인증서
    ca-certificates \
    # Speech SDK 필수 빌드 의존성
    libssl-dev \
    libasound2-dev \
    # gRPC 빌드 의존성
    libprotobuf-dev \
    protobuf-compiler \
    libgrpc++-dev \
    protobuf-compiler-grpc \
    # GStreamer 빌드 의존성 (필요시 유지)
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    # ---=[ 수정됨: Google Test 개발 라이브러리 추가 ]=---
    libgtest-dev \
    # 패키지 정리
    && update-ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# ---=[ 수정됨: Google Test 라이브러리 컴파일 및 설치 ]=---
# /usr/src/googletest 에 설치된 소스 코드를 빌드합니다.
RUN cd /usr/src/googletest && \
    cmake CMakeLists.txt && \
    make && \
    # 컴파일된 라이브러리 파일(*.a)들을 시스템 라이브러리 경로로 복사합니다.
    # 경로는 시스템에 따라 /usr/lib/ 또는 /usr/lib/aarch64-linux-gnu/ 등일 수 있습니다.
    # find /usr/src/googletest -name '*.a' -exec cp {} /usr/lib \; # 간단한 복사 방법
    # 또는 install 명령 사용 (더 권장될 수 있음)
    find /usr/src/googletest -name '*.a' -exec install -o root -g root -m 644 {} /usr/lib \;


# Azure Speech SDK 다운로드 및 설치 (변경 없음)
RUN mkdir -p $SPEECHSDK_ROOT && \
    wget -O speechsdk.tar.gz https://aka.ms/csspeech/linuxbinary && \
    tar -xzf speechsdk.tar.gz -C $SPEECHSDK_ROOT --strip-components=1 && \
    rm speechsdk.tar.gz

# 소스 코드 복사 (변경 없음)
WORKDIR /app
COPY . .

# 프로젝트 및 유닛 테스트 빌드
# CMakeLists.txt 에 unit_tests 타겟이 정의되어 있다고 가정합니다.
RUN mkdir build && cd build && \
    # CMake 실행 시 테스트 빌드 옵션 추가 가능 (예: -DBUILD_TESTS=ON)
    cmake .. -DCMAKE_BUILD_TYPE=Release -DSPEECHSDK_ROOT=${SPEECHSDK_ROOT} && \
    make VERBOSE=1 -j$(nproc) # make all (stt_server 및 unit_tests 모두 빌드)

# ---=[ 수정됨: 유닛 테스트 실행 ]=---
# 빌드된 유닛 테스트 실행 파일을 실행합니다.
# 실행 파일 이름과 경로는 CMakeLists.txt 설정에 따라 달라질 수 있습니다. (예: unit_tests)
# 테스트 실패 시 Docker 빌드가 여기서 중단됩니다.
RUN cd build && ./unit_tests # 실행 파일 이름 확인 필요!


# ---- Runtime Stage (선택 사항) ----
# 유닛 테스트만 실행하는 것이 목적이라면 아래 Runtime Stage는 생략 가능합니다.
# 만약 테스트가 통과된 빌드 결과(stt_server)를 사용하고 싶다면 유지합니다.

# FROM ubuntu:22.04 AS runtime
# ... (기존 Runtime Stage 내용과 동일) ...
# ... (라이브러리 복사, ldconfig, WORKDIR, 최종 실행 파일 복사 등) ...

# 유닛 테스트 이미지의 최종 목적이 실행 파일 배포가 아니라면
# CMD ["./stt_server"] 대신 다른 명령 (예: bash)을 사용하거나 생략할 수 있습니다.
# CMD ["./stt_server"]