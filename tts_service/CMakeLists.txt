cmake_minimum_required(VERSION 3.15)
project(tts_service)

set(CMAKE_CXX_STANDARD 17)

# -----------------------------
# ‚úÖ Ìå®ÌÇ§ÏßÄ Ï∞æÍ∏∞
# -----------------------------
find_package(gRPC REQUIRED)
find_package(pybind11 REQUIRED)
find_package(GTest REQUIRED)

include_directories(
    ${Protobuf_INCLUDE_DIRS}
    ${CMAKE_CURRENT_BINARY_DIR}
    src
    proto
    tests
)

# -----------------------------
# ‚úÖ .proto ÌååÏùº Í≤ΩÎ°ú Î∞è ÏÉùÏÑ± ÎîîÎ†âÌÜ†Î¶¨ ÏßÄÏ†ï
# -----------------------------
set(PROTO_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/proto)
set(PROTO_FILE ${PROTO_SRC_DIR}/tts.proto)
set(GENERATED_SRC_DIR ${CMAKE_CURRENT_BINARY_DIR}/generated)
file(MAKE_DIRECTORY ${GENERATED_SRC_DIR})

# -----------------------------
# ‚úÖ protoc Î∞è grpc_cpp_plugin ÏàòÎèôÏúºÎ°ú Ï∞æÍ∏∞
# -----------------------------
find_program(Protobuf_PROTOC_EXECUTABLE protoc)
if(NOT Protobuf_PROTOC_EXECUTABLE)
    message(FATAL_ERROR "protoc not found")
endif()

find_program(GRPC_CPP_PLUGIN grpc_cpp_plugin)
if(NOT GRPC_CPP_PLUGIN)
    message(FATAL_ERROR "grpc_cpp_plugin not found")
endif()

# -----------------------------
# ‚úÖ .proto ‚Üí C++ ÌååÏùº ÏÉùÏÑ± Î™ÖÎ†π
# -----------------------------
add_custom_command(
    OUTPUT
        ${GENERATED_SRC_DIR}/tts.pb.cc
        ${GENERATED_SRC_DIR}/tts.pb.h
        ${GENERATED_SRC_DIR}/tts.grpc.pb.cc
        ${GENERATED_SRC_DIR}/tts.grpc.pb.h
    COMMAND ${CMAKE_COMMAND} -E make_directory ${GENERATED_SRC_DIR}
    COMMAND ${Protobuf_PROTOC_EXECUTABLE}
        --proto_path=${PROTO_SRC_DIR}
        --cpp_out=${GENERATED_SRC_DIR}
        --grpc_out=${GENERATED_SRC_DIR}
        --plugin=protoc-gen-grpc=${GRPC_CPP_PLUGIN}
        ${PROTO_FILE}
    DEPENDS ${PROTO_FILE}
    COMMENT "üè¶ Generating gRPC & protobuf code"
    VERBATIM
)

add_custom_target(generate_proto_code DEPENDS
    ${GENERATED_SRC_DIR}/tts.pb.cc
    ${GENERATED_SRC_DIR}/tts.grpc.pb.cc
)

# -----------------------------
# ‚úÖ Î©îÏù∏ Ïã§Ìñâ ÌÉÄÍ≤ü
# -----------------------------
set(APP_SRC
    src/main.cpp
    src/tts_service.cpp
    src/tts_engine.cpp
    ${GENERATED_SRC_DIR}/tts.pb.cc
    ${GENERATED_SRC_DIR}/tts.grpc.pb.cc
)

add_executable(tts_service ${APP_SRC})
add_dependencies(tts_service generate_proto_code)

target_include_directories(tts_service PRIVATE ${GENERATED_SRC_DIR})

target_link_libraries(tts_service
    gRPC::grpc++
    protobuf::libprotobuf
    pybind11::embed
)

# -----------------------------
# ‚úÖ ÌÖåÏä§Ìä∏ ÌÉÄÍ≤ü
# -----------------------------
add_executable(grpc_tests
    tests/test_grpc_tts.cpp
    src/tts_service.cpp
    src/tts_engine.cpp
    ${GENERATED_SRC_DIR}/tts.pb.cc
    ${GENERATED_SRC_DIR}/tts.grpc.pb.cc
)

target_include_directories(grpc_tests PRIVATE ${GENERATED_SRC_DIR})
target_link_libraries(grpc_tests
    GTest::gtest_main
    gRPC::grpc++
    protobuf::libprotobuf
    pybind11::embed
)

add_test(NAME GRPC_TTS_Integration_Test COMMAND grpc_tests)

# -----------------------------
# üßπ C++ ÏΩîÎìú Ìè¨Îß∑Ïö© ÌÉÄÍ≤ü
# -----------------------------
find_program(CLANG_FORMAT_EXE NAMES clang-format)
if(CLANG_FORMAT_EXE)
    file(GLOB_RECURSE ALL_CXX_SOURCE_FILES src/*.cpp src/*.h tests/*.cpp)
    add_custom_target(format
        COMMAND ${CLANG_FORMAT_EXE} -i ${ALL_CXX_SOURCE_FILES}
        COMMENT "Running clang-format on C++ sources"
    )
else()
    message(WARNING "clang-format not found. 'make format' will be unavailable.")
endif()
