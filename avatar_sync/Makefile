# üì¶ ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Ï†ï
PROJECT_NAME := avatar_sync_service
BUILD_DIR   := build
OBJ_DIR     := $(BUILD_DIR)/obj
EXECUTABLE  := $(BUILD_DIR)/$(PROJECT_NAME)
TEST_EXEC   := $(BUILD_DIR)/avatar_sync_tests

SRC_DIR     := src
PROTO_DIR   := proto
PROTO_FILE  := $(PROTO_DIR)/avatar.proto
GEN_DIR     := $(BUILD_DIR)/generated
TEST_DIR    := tests

# ‚úÖ protoc & gRPC plugin
PROTOC           := protoc
GRPC_CPP_PLUGIN  := /opt/homebrew/bin/grpc_cpp_plugin

# ‚úÖ vcpkg Í≤ΩÎ°ú (arm64-osx Í∏∞Ï§Ä)
VCPKG_INCLUDE := $(VCPKG_ROOT)/installed/arm64-osx/include
VCPKG_LIB     := $(VCPKG_ROOT)/installed/arm64-osx/lib

# include Í≤ΩÎ°ú Î∞è pkg-config ÏÑ§Ï†ï
INCLUDES    := \
    -I$(SRC_DIR) \
    -I$(GEN_DIR) \
    -I$(VCPKG_INCLUDE) \
    -I$(VCPKG_INCLUDE)/uwebsockets \
    -I$(VCPKG_INCLUDE)/nlohmann

PKG_CFLAGS  := $(shell pkg-config --cflags protobuf grpc++)
PKG_LDFLAGS := $(shell pkg-config --libs protobuf grpc++)

CXX         := clang++
CXXFLAGS    := -std=c++20 -Wall $(INCLUDES) $(PKG_CFLAGS)
LDFLAGS     := $(PKG_LDFLAGS) -L$(VCPKG_LIB) -lusockets -lz -lssl -lcrypto -luv -lpthread

# ÏûêÎèô ÏÉùÏÑ± ÌååÏùº (.proto ‚Üí .cc/.h)
GEN_SRCS := $(GEN_DIR)/avatar.pb.cc \
            $(GEN_DIR)/avatar.grpc.pb.cc
GEN_HDRS := $(GEN_DIR)/avatar.pb.h \
            $(GEN_DIR)/avatar.grpc.pb.h

# Ï†ÑÏ≤¥ ÏõêÎ≥∏ ÏÜåÏä§
SRC_ALL := \
    $(SRC_DIR)/main.cpp \
    $(SRC_DIR)/avatar_sync_service.cpp \
    $(SRC_DIR)/websocket_dispatcher_uwebs.cpp \
    $(GEN_SRCS)

# Ïò§Î∏åÏ†ùÌä∏ ÌååÏùº Îß§Ìïë
OBJS := \
    $(patsubst $(SRC_DIR)/%.cpp, $(OBJ_DIR)/%.o, \
        $(filter %.cpp, $(SRC_ALL))) \
    $(patsubst $(GEN_DIR)/%.cc, $(OBJ_DIR)/gen/%.o, \
        $(filter %.cc, $(SRC_ALL)))

# -----------------------------
# üéØ Í∏∞Î≥∏ ÎπåÎìú: all ‚Üí executables
# -----------------------------
all: $(EXECUTABLE)

# -----------------------------
# üåê gRPC ÏΩîÎìú ÏÉùÏÑ± (.proto ‚Üí .cc/.h)
# -----------------------------
$(GEN_SRCS) $(GEN_HDRS): $(PROTO_FILE)
	@mkdir -p $(GEN_DIR)
	$(PROTOC) --proto_path=$(PROTO_DIR) \
             --cpp_out=$(GEN_DIR) \
             --grpc_out=$(GEN_DIR) \
             --plugin=protoc-gen-grpc=$(GRPC_CPP_PLUGIN) \
             $(PROTO_FILE)

# -----------------------------
# üîß Ïª¥ÌååÏùº: .cpp/.cc ‚Üí .o
# -----------------------------
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp $(GEN_HDRS)
	@mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(OBJ_DIR)/gen/%.o: $(GEN_DIR)/%.cc $(GEN_HDRS)
	@mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) -c $< -o $@

# -----------------------------
# üîó ÎßÅÌÅ¨: Î™®Îì† Ïò§Î∏åÏ†ùÌä∏ ‚Üí Ïã§Ìñâ ÌååÏùº
# -----------------------------
$(EXECUTABLE): $(OBJS)
	@mkdir -p $(BUILD_DIR)
	$(CXX) $^ -o $@ $(LDFLAGS)

# -----------------------------
# üß™ ÌÖåÏä§Ìä∏ ÌÉÄÍ≤ü
# -----------------------------
TEST_SRCS    := $(wildcard $(TEST_DIR)/*.cpp)
TEST_OBJS    := $(patsubst $(TEST_DIR)/%.cpp, $(OBJ_DIR)/%.o, $(TEST_SRCS))
PROTO_OBJS   := $(OBJ_DIR)/gen/avatar.pb.o $(OBJ_DIR)/gen/avatar.grpc.pb.o
IMPL_OBJ     := $(OBJ_DIR)/avatar_sync_service.o
TEST_LDFLAGS := -lgtest -pthread

$(TEST_EXEC): $(TEST_OBJS) $(IMPL_OBJ) $(PROTO_OBJS)
	@mkdir -p $(BUILD_DIR)
	$(CXX) $(CXXFLAGS) -o $@ \
	    $(TEST_OBJS) $(IMPL_OBJ) $(PROTO_OBJS) \
	    $(LDFLAGS) $(TEST_LDFLAGS)

$(OBJ_DIR)/%.o: $(TEST_DIR)/%.cpp $(GEN_HDRS)
	@mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) -std=c++17 -c $< -o $@

test: $(TEST_EXEC)
	@echo "üß™ [test] ÌÜµÌï© ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ï§ë..."
	@$(TEST_EXEC)

# -----------------------------
# üöÄ Ïã§Ìñâ
# -----------------------------
run: $(EXECUTABLE)
	@echo "üöÄ [run] Ïã§Ìñâ Ï§ë..."
	@$(EXECUTABLE)

# -----------------------------
# üîÑ ÏΩîÎìú Ìè¨Îß∑
# -----------------------------
format:
	clang-format -i $(shell find $(SRC_DIR) $(TEST_DIR) -name '*.cpp' -or -name '*.h')

# -----------------------------
# ‚ùå ÌÅ¥Î¶∞
# -----------------------------
clean:
	rm -rf $(BUILD_DIR)

re: clean all

.PHONY: all clean re run test format
